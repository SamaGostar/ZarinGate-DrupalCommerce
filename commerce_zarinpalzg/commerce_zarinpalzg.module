<?php

/**
 * @file
 * Implements zarinpalzg payment services for use in Drupal Commerce.
 * @author
 * Farhad Hedayati Fard <hf.farhad@gmail.com> - 2012 (c)  and developed by Masoud Amini 
 * @license
 * GPLv2
 */

/**
 * Implements hook_commerce_payment_method_info().
 *
 * This hook will define the zarinpalzg payment method
 */
function commerce_zarinpalzg_commerce_payment_method_info()
{
    $payment_methods = array();
    
    $payment_methods['zarinpalzg'] = array(
        'base' => 'commerce_zarinpalzg',
        'title' => t('zarinpalzg'),
        'short_title' => t('zarinpalzg'),
        'display_title' => t('zarinpalzg'),
        'description' => t('Integrates zarinpalzg payment system'),
        'terminal' => FALSE,
        'offsite' => TRUE,
        'offsite_autoredirect' => TRUE
    );
    
    return $payment_methods;
}

/**
 * Payment method callback: settings form.
 *
 * Returns form elements for the payment methods settings form included
 * as part of the payment methods enabling action in Rules
 */
function commerce_zarinpalzg_settings_form($settings = NULL)
{
    $form = array();
    
    $settings = (array) $settings + array(
        'merchant_id' => '',
        'currency' => variable_get('commerce_default_currency', 'IRR')
    );
    
    $form['merchant_id'] = array(
        '#type' => 'textfield',
        '#title' => t('Merchant ID'),
        '#description' => t('Your zarinpalzg Merchant ID'),
        '#default_value' => isset($settings['merchant_id']) ? $settings['merchant_id'] : ""
    );
    $form['currency']    = array(
        '#type' => 'select',
        '#title' => t('Currency code'),
        '#description' => t('Transactions can only be processed in one of the listed currencies.'),
        '#options' => commerce_zarinpalzg_currencies(),
        '#default_value' => $settings['currency']
    );
    
    $form['#submit'][] = 'commerce_zarinpalzg_settings_form_submit';
    
    return $form;
}

/**
 * Payment method callback: redirect form
 *
 * returns form elements that should be submitted to the redirected
 * payment service
 */
function commerce_zarinpalzg_redirect_form($form, &$form_state, $order, $payment_method)
{
    // Return an error if the enabling action's settings haven't been configured.
    if (empty($payment_method['settings']['merchant_id'])) {
        drupal_set_message(t('zarinpalzg is not configured for use. No zarinpalzg merchant ID has been specified.'), 'error');
        return array();
    }
    
    // Set feedback URLs
    $settings = array(
        // Return to the previous page when payment is canceled
        'cancel_return' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], array(
            'absolute' => TRUE
        )),
        
        // Return to the payment redirect page for processing successful payments
        'return' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], array(
            'absolute' => TRUE
        )),
        
        // Specify the current payment method instance ID in the notify_url
        'payment_method' => $payment_method['instance_id']
    );
    
    return commerce_zarinpalzg_build_redirect_form($form, $form_state, $order, $payment_method['settings'] + $settings);
}

/**
 * Helper function for the redirect_form callback.
 * Builds an zarinpalzg payment form from an order object.
 */
function commerce_zarinpalzg_build_redirect_form($form, &$form_state, $order, $settings)
{
    global $user;
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    
    // Get financial info
    $currency_code = $wrapper->commerce_order_total->currency_code->value();
    // price is saved in "Xyz" format meaning X.yz rials, therfore We need to devide it by 100 * 10 to get price in tomans
    $amount        = (int) $wrapper->commerce_order_total->amount->value() / 1000;
    
    // Build the data array that will be translated into hidden form values.
    $data = array(
        array(
            'MerchantID' => $settings['merchant_id'],
            'Amount' => $amount,
            'Description' => 'Commerce Order #' . $order->order_id,
            'Email' => '',
            'Mobile' => '',
            'CallbackURL' => $settings['return']
        )
    );
    
    $nusoap_path = drupal_get_path('module', 'commerce_zarinpalzg') . '/nusoap.php';
    include_once($nusoap_path);
    
    $client = new nusoap_client('https://www.zarinpal.com/pg/services/WebGate/wsdl', 'wsdl');
    $res    = $client->call('PaymentRequest', $data);
    
    // Redirect to zarinpalzg URL
    if ($res['Status'] == 100) {
        $url             = 'https://www.zarinpal.com/pg/StartPay/' . $res['Authority'] . '/ZarinGate';
        $form['#action'] = $url;
    } else {
        $form['#action'] = $res['Status'];
    }
    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Proceed with payment')
    );
    
    return $form;
}

/**
 * Implements hook_redirect_form_validate().
 */
function commerce_zarinpalzg_redirect_form_validate($order, $payment_method)
{
    $nusoap_path = drupal_get_path('module', 'commerce_zarinpalzg') . '/nusoap.php';
    include_once($nusoap_path);
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    
    $merchant_id = $payment_method['settings']['merchant_id'];
    // price is saved in "Xyz" format meaning X.yz rials, therfore We need to devide it by 100 * 10 to get price in tomans 
    $amount      = (int) $wrapper->commerce_order_total->amount->value() / 1000;
    
    if (isset($_GET['Authority']) AND $_GET['Status'] == "OK") {
        $client   = new nusoap_client('https://www.zarinpal.com/pg/services/WebGate/wsdl', 'wsdl');
        $res      = $client->call("PaymentVerification", array(
            array(
                'MerchantID' => $merchant_id,
                'Authority' => $_GET['Authority'],
                'Amount' => $amount
            )
        ));
        $feedback = array(
            'result' => $res['Status'],
            'remote_id' => $res['RefID'],
            'au' => $_GET['Authority']
        );
        if ($res->Status == 100) {
            watchdog('commerce_zarinpalzg', "zarinpalzg payment #" . $feedback['remote_id'] . " verification succeeded, zarinpalzg returned " + $res->Status, array(), WATCHDOG_INFO);
            commerce_zarinpalzg_process_transaction($order, $payment_method, $feedback);
            return TRUE;
        } else {
            watchdog('commerce_zarinpalzg', "zarinpalzg payment #" . $feedback['remote_id'] . " verification failed, zarinpalzg returned " + $res->Status, array(), WATCHDOG_ERROR);
            return FALSE;
        }
    } else {
        watchdog('commerce_zarinpalzg', 'No valid au found', array(), WATCHDOG_ERROR);
        return FALSE;
    }
}

/**
 * Process the payment transaction with the info received from zarinpalzg
 *
 * @param $order
 *   The loaded order that is being processed
 * @param $payment_method
 *   The payment method settings
 * @param $feedback
 *   The parameters received from zarinpalzg regarding the payment
 */
function commerce_zarinpalzg_process_transaction($order, $payment_method, $feedback)
{
    $transaction    = commerce_payment_transaction_new('zarinpalzg', $order->order_id);
    $payment_status = commerce_zarinpalzg_feedback_status($feedback['result']);
    
    // identifying data
    $transaction->instance_id   = $payment_method['instance_id'];
    $transaction->remote_id     = $feedback['remote_id'];
    // payment amount details
    $transaction->amount        = $order->commerce_order_total[LANGUAGE_NONE][0]['amount'];
    $transaction->currency_code = $order->commerce_order_total[LANGUAGE_NONE][0]['currency_code'];
    // payment status
    $transaction->remote_status = $feedback;
    $transaction->status        = $payment_status['code'];
    $transaction->message       = $payment_status['message'];
    $transaction->payload       = $feedback['au'];
    commerce_payment_transaction_save($transaction);
    if ($payment_status['code'] == COMMERCE_PAYMENT_STATUS_FAILURE) {
        commerce_payment_redirect_pane_previous_page($order);
    } else {
        commerce_payment_redirect_pane_next_page($order);
    }
}

/**
 * Get a list of enabled currencies
 *
 * @TODO: figure out which currencies zarinpalzg actually supports
 */
function commerce_zarinpalzg_currencies()
{
    // Build a currency options list from all enabled currencies.
    $options = array();
    
    foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
        $options[$currency_code] = t('@code - !name', array(
            '@code' => $currency['code'],
            '@symbol' => $currency['symbol'],
            '!name' => $currency['name']
        ));
        
        if (!empty($currency['symbol'])) {
            $options[$currency_code] .= ' - ' . check_plain($currency['symbol']);
        }
    }
    
    return $options;
}

function commerce_zarinpalzg_feedback_status($status)
{
    switch ($status) {
        /** SUCCESS **/
        case 1: // Order stored
            $st  = COMMERCE_PAYMENT_STATUS_SUCCESS;
            $msg = t('Payment processed by merchant');
            break;
        
        /** FAILURE **/
        case -1:
            $st  = COMMERCE_PAYMENT_STATUS_FAILURE;
            $msg = t('Incomplete data');
            break;
        case -2:
            $st  = COMMERCE_PAYMENT_STATUS_FAILURE;
            $msg = t('Invalid webservice');
            break;
        case -12:
            $st  = COMMERCE_PAYMENT_STATUS_FAILURE;
            $msg = t('Payment timed out');
            break;
        case -11: // Authorization not known
            $st  = COMMERCE_PAYMENT_STATUS_FAILURE;
            $msg = t('Payment amount conflict');
            break;
        case 0:
            $st  = COMMERCE_PAYMENT_STATUS_FAILURE;
            $msg = t('Payment canceled by user');
            break;
        
        default:
            $st  = COMMERCE_PAYMENT_STATUS_FAILURE;
            $msg = t('Unknown feedback status');
            break;
    }
    return array(
        'code' => $st,
        'message' => $msg
    );
}
